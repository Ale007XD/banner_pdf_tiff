import logging
import asyncio
from typing import Optional, Tuple
from telegram import Update, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.error import TelegramError

from .config import (
    TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHANNEL_ID,
    ADMIN_TELEGRAM_ID,
    MAX_FILE_SIZE_MB,
    DEFAULT_DPI,
)
from .convert import pdf_to_tiff_ghostscript


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command."""
    message = (
        "üìÑ *–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä PDF –≤ TIFF*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ TIFF.\n\n"
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        f"‚Ä¢ DPI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_DPI}\n"
        "‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n\n"
        "üîß *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ `/dpi <—á–∏—Å–ª–æ>` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å DPI (72-1200)\n"
        "‚Ä¢ `/pages N` - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å N-—é —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
        "‚Ä¢ `/pages A-B` - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç A –¥–æ B\n\n"
        "üí° *–°–æ–≤–µ—Ç:* PDF –≤ –∫—Ä–∏–≤—ã—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ; "
        "–¥–ª—è —Ç–æ–Ω–∫–∏—Ö –ª–∏–Ω–∏–π/–º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/dpi 300`."
    )
    await update.message.reply_text(message, parse_mode="Markdown")


async def dpi_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /dpi command."""
    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ DPI:\n`/dpi <—á–∏—Å–ª–æ>`\n\n–ü—Ä–∏–º–µ—Ä: `/dpi 300`",
            parse_mode="Markdown"
        )
        return
    
    try:
        dpi = int(context.args[0])
        if not 72 <= dpi <= 1200:
            await update.message.reply_text(
                "‚ùå DPI –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 72 –¥–æ 1200."
            )
            return
        
        context.user_data["dpi"] = dpi
        await update.message.reply_text(
            f"‚úÖ DPI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {dpi}"
        )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ DPI. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 72 –¥–æ 1200."
        )


async def pages_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /pages command."""
    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü:\n"
            "`/pages N` - –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n"
            "`/pages A-B` - –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ `/pages 1`\n‚Ä¢ `/pages 1-5`",
            parse_mode="Markdown"
        )
        return
    
    page_arg = context.args[0]
    
    try:
        if "-" in page_arg:
            # Range: A-B
            start_str, end_str = page_arg.split("-", 1)
            start_page = int(start_str)
            end_page = int(end_str)
            
            if start_page < 1 or end_page < 1 or start_page > end_page:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü. "
                    "–°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏, "
                    "–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –∫–æ–Ω–µ—á–Ω—É—é."
                )
                return
                
            context.user_data["pages"] = (start_page, end_page)
            await update.message.reply_text(
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü: {start_page}-{end_page}"
            )
        else:
            # Single page: N
            page_num = int(page_arg)
            if page_num < 1:
                await update.message.reply_text(
                    "‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
                )
                return
                
            context.user_data["pages"] = (page_num, page_num)
            await update.message.reply_text(
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_num}"
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ `/pages 5` –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n"
            "‚Ä¢ `/pages 1-10` –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞",
            parse_mode="Markdown"
        )


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /stats command (admin only)."""
    user_id = update.effective_user.id
    if user_id != ADMIN_TELEGRAM_ID:
        return  # Ignore non-admin users
    
    await update.message.reply_text("–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle PDF documents."""
    document = update.message.document
    
    # Validate MIME type
    if not document.mime_type or "pdf" not in document.mime_type.lower():
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª."
        )
        return
    
    # Validate file size
    max_size_bytes = MAX_FILE_SIZE_MB * 1024 * 1024
    if document.file_size > max_size_bytes:
        await update.message.reply_text(
            f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_FILE_SIZE_MB} MB. "
            f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {document.file_size / (1024 * 1024):.1f} MB"
        )
        return
    
    # Send progress message
    progress_message = await update.message.reply_text("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é‚Ä¶")
    
    try:
        # Get user settings
        dpi = context.user_data.get("dpi", DEFAULT_DPI)
        pages = context.user_data.get("pages", (1, 1))
        first_page, last_page = pages
        
        # Download PDF file
        file = await document.get_file()
        pdf_bytes = await file.download_as_bytearray()
        
        logger.info(
            f"Converting PDF: size={len(pdf_bytes)} bytes, "
            f"dpi={dpi}, pages={first_page}-{last_page}"
        )
        
        # Convert PDF to TIFF
        tiff_bytes, output_filename = pdf_to_tiff_ghostscript(
            input_pdf_bytes=bytes(pdf_bytes),
            dpi=dpi,
            first_page=first_page,
            last_page=last_page
        )
        
        # Generate filename with settings
        base_name = document.file_name.rsplit('.', 1)[0] if document.file_name else "document"
        if first_page == last_page:
            filename = f"{base_name}_p{first_page}_{dpi}dpi.tiff"
        else:
            filename = f"{base_name}_p{first_page}-{last_page}_{dpi}dpi.tiff"
        
        # Create InputFile object
        tiff_file = InputFile(
            obj=tiff_bytes,
            filename=filename
        )
        
        # Send to user
        await update.message.reply_document(
            document=tiff_file,
            caption=f"‚úÖ PDF –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω\nüìä DPI: {dpi}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü—ã: {first_page}-{last_page}"
        )
        
        # Send to channel
        try:
            await context.bot.send_document(
                chat_id=TELEGRAM_CHANNEL_ID,
                document=InputFile(
                    obj=tiff_bytes,
                    filename=filename
                ),
                caption=f"PDF ‚Üí TIFF\nDPI: {dpi}, –°—Ç—Ä–∞–Ω–∏—Ü—ã: {first_page}-{last_page}"
            )
        except TelegramError as e:
            logger.error(f"Failed to send to channel: {e}")
        
        logger.info(f"Conversion completed: {filename}")
        
    except RuntimeError as e:
        logger.error(f"Conversion failed: {str(e)[:500]}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)[:200]}..."
        )
    except Exception as e:
        logger.error(f"Unexpected error during conversion: {str(e)[:500]}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    finally:
        # Delete progress message
        try:
            await progress_message.delete()
        except TelegramError:
            pass  # Ignore if message was already deleted


def setup_handlers(application: Application) -> None:
    """Set up bot handlers."""
    # Command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("dpi", dpi_command))
    application.add_handler(CommandHandler("pages", pages_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # Document handler for PDFs
    application.add_handler(MessageHandler(
        filters.Document.PDF | filters.Document.MimeType("application/pdf"),
        handle_document
    ))


async def main() -> None:
    """Main function to run the bot."""
    # Create application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Set up handlers
    setup_handlers(application)
    
    # Run bot
    await application.run_polling()


if __name__ == "__main__":
    asyncio.run(main())
